#!/bin/bash
#
# ** nextcloud_backups_aws_s3 **
# Utility to make backups of Nextcloud and store them in an S3 bucket
#
#
# Álvaro Castellano Vela - https://github.com/a-castellano

# Default values and commands as variables
source lib/01-default_values_and_commands.sh

# Usage
source lib/02-usage.sh

# Utils
source lib/03-utils.sh

# Logger
source lib/04-logger.sh

# Options
source lib/05-options.sh

# Test options
source lib/06-test_options.sh

# Config files
source lib/07-config_files.sh


function check_required_software {
    errors=false

    MYSQL=$($WHICH mysql)
    if [[ -z $MYSQL ]]; then
        errors=true
        error_msg="MySQL client is not installed, please install it before start backup jobs"
        report_error $error_msg
    fi
    MYDUMPER=$($WHICH mydumper)
    if [[ -z $MYDUMPER ]]; then
        errors=true
        error_msg="mydumper is not installed, please install it before start backup jobs"
        report_error $error_msg
    fi
    S3CMD=$($WHICH s3cmd)
    if [[ -z $S3CMD ]]; then
        errors=true
        error_msg="s3cmd is not installed, please install it before start backup jobs"
        report_error $error_msg
    fi

    if [[ "$errors" = "true" ]]; then
        exit 1
    fi
}

function check_databse_connection {
    TEST=$( mysql -u$DATABASE_USER -p$DATABASE_PASSWD --port=$DATABASE_PORT -h $DATABASE_HOST -Bse "use $DATABASE_NAME" 2> $LOCAL_ERROR_FILE > /dev/null )
    if [ $? -ne 0 ]; then
        error_msg=$( $CAT $LOCAL_ERROR_FILE )
        report_error $error_msg
        $RM $LOCAL_ERROR_FILE
        exit 1
    fi
    $RM $LOCAL_ERROR_FILE
}

function check_s3_conection {
    TEST=$( s3cmd --access_key=$S3_ACCESS_KEY --secret_key=$S3_SECRET_KEY info s3://$S3_BUCKET 2> $LOCAL_ERROR_FILE > /dev/null )
    if [ $? -ne 0 ]; then
        error_msg=$( $CAT $LOCAL_ERROR_FILE )
        report_error $error_msg
        $RM $LOCAL_ERROR_FILE
        exit 1
    fi
    $RM $LOCAL_ERROR_FILE
}

# Main

$MKDIR -p $TMP_FOLDER


OPTS=`getopt -o $short_options_array_list$short_options --long $no_params$of_short$one_param -n 'parse-options' -- "$@" 2> $LOCAL_ERROR_FILE `

if [ $? -ne 0 ]; then
    error_msg=$( $CAT $LOCAL_ERROR_FILE )
    report_error $error_msg
    $RM $LOCAL_ERROR_FILE
    exit 1
fi
$RM $LOCAL_ERROR_FILE

eval set -- "$OPTS"

while true; do
  eval "
  case \"$1\" in
    $short_options_array_OR )
            get_option_from_short_options_array $1
            shift ;;
    $short_options_OR )
            get_option_from_short_options_hash $1
            shift ;;
    $of_short_OR )
            check_option_called $( trim $1 )
            shift ;;
    $no_params_OR )
            check_option_called $( trim $1 )
            shift ;;
    $one_param_OR )
            check_option_called $( trim $1 ) $2
            shift ; shift;;
    -- ) shift; break ;;
    * ) break ;;
  esac"
done

# Get variables from files
get_variables_config_file
get_variables_from_nextcloud_config_file

# Check databse port

if [[ -z $DATABASE_PORT ]]; then
    DATABASE_PORT=3306
fi

if [[ -z $DATABASE_HOST ]]; then
    DATABASE_HOST="localhost"
fi

# Look for tests
if [[ -n $TEST ]]; then
    variables_to_test $TEST
    exit 0
fi

# If usage option is set stop the script and print usage
if [[ -n $USAGE || -n $HELP ]]; then
    usage
    exit 0
fi

# If there still arguments not handled abort this script
if [[ "$#" -ne 0 ]]; then
    error_msg="Found illegal parameters: $@"
    report_error $error_msg
    if [[ -z $SILENT  ]];then
        usage
    fi
    exit 1
fi

# Check if loggins into external file is enabled
if [[ "$ENABLE_LOG" = true ]]; then
    if [[ "$ENABLE_LOG" = true && -z $LOG_FILE ]];then
        error_msg="Log enabled but there is no log file declared, add '--log-file' option."
        report_error $error_msg
        exit 1
    else
        # Check if folder is writable
        if [ -f "$LOG_FILE" ]; then
            if [[ ! -w "$LOG_FILE" ]];then
                error_msg="Cannot write log in '$LOG_FILE': Permission Denied"
                report_error $error_msg
                exit 1
            fi
        else
            folder=$( $ECHO $LOG_FILE | $SED 's|/[^/]*$||' )
            if [[ -w $folder ]]; then
                $TOUCH $LOG_FILE
            else
                if [[ -d $folder  ]]; then
                    error_msg="Cannot write log in '$folder': Permission Denied"
                    report_error $error_msg
                    exit 1
                else
                    error_msg="Cannot write log in '$folder': Given path does not exist"
                    report_error $error_msg
                    exit 1
                fi
            fi
        fi
    fi
fi

# Check if all variables are set

declare -a required_variables
required_variables=(
    's3-access-key'
    's3-secret-key'
    's3-bucket'
    'database-name'
    'database-user'
    'database-passwd'
    'database-host'
    'database-port'
    'nextcloud-path'
    'nextcloud-users'
)

unset_variables=""
for var in ${required_variables[@]}
do
    variable=$($ECHO $var | $TR '[:lower:]' '[:upper:]' | $TR '-' '_' )
    if [[ -z ${!variable} ]]; then
        unset_variables="$unset_variables, $var"
    fi
done
if [[ ! "$unset_variables" = "" ]]; then
    unset_variables=$($ECHO $unset_variables | $SED 's/,//' )
    error_msg="The following variables has to have value: $unset_variables. Please set a valid value for it."
    report_error $error_msg
    usage
    exit 1
fi

# Check installed software
check_required_software

# Check database conection

check_databse_connection

# Check S3 connection
check_s3_conection

# Perferm backup

#if [[ ! -z $EXCLUDE_DATABASE ]]; then
#fi

exit 0
