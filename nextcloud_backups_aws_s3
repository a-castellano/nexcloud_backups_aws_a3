#!/bin/bash
#
# ** nextcloud_backups_aws_s3 **
# Utility to make backups of Nextcloud and store them in an S3 bucket
#
#
# Álvaro Castellano Vela - https://github.com/a-castellano

# Default values and commands as variables
source lib/01-default_values_and_commands.sh

# Usage
source lib/02-usage.sh

# Utils
source lib/03-utils.sh

# Logger
source lib/04-logger.sh

# Options
source lib/05-options.sh

# Test options
source lib/06-test_options.sh

# Config files
source lib/07-config_files.sh

# Required software
source lib/08-required-software.sh

# Check connections
source lib/09-check-connections.sh

# Check unset database variables
source lib/10-set_unset_database_variables.sh

# Check if logging into external file is enabled
source lib/11-check_logs.sh

# Check if all required varible for running the script are set
source lib/12-check_required_variables.sh

# Main
$MKDIR -p $TMP_FOLDER


OPTS=`getopt -o $short_options_array_list$short_options --long $no_params$of_short$one_param -n 'parse-options' -- "$@" 2> $LOCAL_ERROR_FILE `

if [ $? -ne 0 ]; then
    error_msg=$( $CAT $LOCAL_ERROR_FILE )
    report_error $error_msg
    $RM $LOCAL_ERROR_FILE
    exit 1
fi
$RM $LOCAL_ERROR_FILE

eval set -- "$OPTS"

while true; do
  eval "
  case \"$1\" in
    $short_options_array_OR )
            get_option_from_short_options_array $1
            shift ;;
    $short_options_OR )
            get_option_from_short_options_hash $1
            shift ;;
    $of_short_OR )
            check_option_called $( trim $1 )
            shift ;;
    $no_params_OR )
            check_option_called $( trim $1 )
            shift ;;
    $one_param_OR )
            check_option_called $( trim $1 ) $2
            shift ; shift;;
    -- ) shift; break ;;
    * ) break ;;
  esac"
done

# Get variables from files
get_variables_config_file
get_variables_from_nextcloud_config_file

# Check databse port and host
set_unset_database_variables

# Look for tests
if [[ -n $TEST ]]; then
    variables_to_test $TEST
    exit 0
fi

# If usage option is set stop the script and print usage
if [[ -n $USAGE || -n $HELP ]]; then
    usage
    exit 0
fi

# If there still arguments not handled abort this script
if [[ "$#" -ne 0 ]]; then
    error_msg="Found illegal parameters: $@"
    report_error $error_msg
    if [[ -z $SILENT  ]];then
        usage
    fi
    exit 1
fi

# Check if logging into external file is enabled
check_log_file

# Check if all variables are set
check_required_variables

# Check installed software
check_required_software

# Check database conection
check_databse_connection

# Check S3 connection
check_s3_conection

# Perferm backup

exit 0
