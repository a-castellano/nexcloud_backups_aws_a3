#!/usr/bin/env bash
# file: tests/01-variables

source lib/99-clean_variables.sh

oneTimeSetUp() {
    export TMP_FOLDER="/var/tmp/nextcloudbackupsawss3/tests"
    export NEXTCLOUD_PATH="$(pwd)/tests/config_folders/config_test"
    export CONFIG_FILE="$(pwd)/tests/config_folders/config/nextcloudbackupsawss3"
    mkdir -p $TMP_FOLDER
}

oneTimeTearDown() {
    unset NEXTCLOUD_PATH
    unset CONFIG_FILE
    cleanVariables
    rm -rf $TMP_FOLDER/
}

testVerboseNotDefined() {
    undefined=$(./src/nextcloudbackupsawss3 --test='verbose')
    assertEquals "$undefined" "VERBOSE is not defined"
}

testVerboseIsDefined() {
    defined=$(./src/nextcloudbackupsawss3 --test='verbose' -v)
    assertEquals "$defined" "VERBOSE -> true"
}

testHelpNotDefined() {
    undefined=$(./src/nextcloudbackupsawss3 --test='help' -u)
    assertEquals "$undefined" "HELP is not defined"
}

testHelpIsDefined() {
    defined=$(./src/nextcloudbackupsawss3 -h --test='help')
    assertEquals "$defined" "HELP -> true"
}

testUsageNotDefined() {
    undefined=$(./src/nextcloudbackupsawss3 --test='usage')
    assertEquals "$undefined" "USAGE is not defined"
}

testUsageIsDefined() {
    defined=$(./src/nextcloudbackupsawss3 --usage --test='usage')
    assertEquals "$defined" "USAGE -> true"
}

testSilentNotDefined() {
    undefined=$(./src/nextcloudbackupsawss3 --test='silent')
    assertEquals "$undefined" "SILENT is not defined"
}

testSilentIsDefined() {
    defined=$(./src/nextcloudbackupsawss3 -s --test='silent')
    assertEquals "$defined" "SILENT -> true"
}

testS3AccessNotDefined() {
    undefined=$(./src/nextcloudbackupsawss3 --test='s3-access-key')
    assertEquals "$undefined" "S3_ACCESS_KEY is not defined"
}

testS3AccessIsDefined() {
    defined=$(./src/nextcloudbackupsawss3 --s3-access-key="my-access" --test='s3-access-key')
    assertEquals "$defined" "S3_ACCESS_KEY -> my-access"
}

testS3SecretNotDefined() {
    undefined=$(./src/nextcloudbackupsawss3 --test='s3-secret-key')
    assertEquals "$undefined" "S3_SECRET_KEY is not defined"
}

testS3SecretIsDefined() {
    defined=$(./src/nextcloudbackupsawss3 --s3-secret-key "my-secret" --test='s3-secret-key')
    assertEquals "$defined" "S3_SECRET_KEY -> my-secret"
}

testDatabaseNameNotDefined() {
    NEXTCLOUD_PATH="$(pwd)/tests/config_folders/config_test_no_values"
    undefined=$(./src/nextcloudbackupsawss3 --test='database-name')
    assertEquals "$undefined" "DATABASE_NAME is not defined"
}

testDatabaseNameIsDefined() {
    defined=$(./src/nextcloudbackupsawss3 --database-name "mynextclouddatabase" --test='database-name')
    assertEquals "$defined" "DATABASE_NAME -> mynextclouddatabase"
}

testDatabaseUserNotDefined() {
    undefined=$(./src/nextcloudbackupsawss3 --test='database-user')
    assertEquals "$undefined" "DATABASE_USER is not defined"
}

testDatabaseUserIsDefined() {
    defined=$(./src/nextcloudbackupsawss3 --database-user="user" --test='database-user')
    assertEquals "$defined" "DATABASE_USER -> user"
}

testDatabasePasswordNotDefined() {
    undefined=$(./src/nextcloudbackupsawss3 --test='database-passwd')
    assertEquals "$undefined" "DATABASE_PASSWD is not defined"
}

testDatabasePasswordIsDefined() {
    defined=$(./src/nextcloudbackupsawss3 --database-passwd="secrepasswd" --test='database-passwd')
    assertEquals "$defined" "DATABASE_PASSWD -> secrepasswd"
}

testDatabaseHostNotDefined() {
    undefined=$(./src/nextcloudbackupsawss3 --test='database-host')
    assertEquals "$undefined" "DATABASE_HOST -> localhost"
}

testDatabaseHostIsDefined() {
    defined=$(./src/nextcloudbackupsawss3 --database-host="LOLcalhost" --test='database-host')
    assertEquals "$defined" "DATABASE_HOST -> LOLcalhost"
}

testTestIsDefined() {
    defined=$(./src/nextcloudbackupsawss3  --test='test')
    assertEquals "$defined" "TEST -> test"
}

testDatabasePortIsDefined() {
    defined=$(./src/nextcloudbackupsawss3 --database-port 3307 --test='database-port')
    assertEquals "$defined" "DATABASE_PORT -> 3307"
}

testDefaultNextcloudPath() {
    NEXTCLOUD_PATH="$(pwd)/tests/config_folders/config_test_no_values"
    nextcloud_path=$(./src/nextcloudbackupsawss3 --test='nextcloud-path')
    assertEquals "$nextcloud_path" "NEXTCLOUD_PATH -> $(pwd)/tests/config_folders/config_test_no_values"
}

testChangueNextcloudPath() {
    nextcloud_path=$(./src/nextcloudbackupsawss3 --nextcloud-path="$(pwd)/tests/config_folders/config_test_no_values" --test='nextcloud-path')
    assertEquals "$nextcloud_path" "NEXTCLOUD_PATH -> $(pwd)/tests/config_folders/config_test_no_values"
}

testDefaultNextcloudUsers() {
    users=$(./src/nextcloudbackupsawss3 --test='nextcloud-users')
    assertEquals "$users" "NEXTCLOUD_USERS -> ALL"
}

testChangeNextcloudUsers() {
    users=$(./src/nextcloudbackupsawss3 --nextcloud-users="me,bob" --test='nextcloud-users')
    assertEquals "$users" "NEXTCLOUD_USERS -> me,bob"
}

testUndefinedValue() {
    undefined_variable=$(./src/nextcloudbackupsawss3 --test='undefined-variable')
    assertEquals "$undefined_variable" "UNDEFINED_VARIABLE is not defined"
}

testWithSpaces() {
cat << EOF > $TMP_FOLDER/testSpaces
UNDEFINED_VARIABLE is not defined
SPACE is not defined
EOF
    ./src/nextcloudbackupsawss3 --test='       undefined-variable, space' > $TMP_FOLDER/testWithSpaces
    diff $TMP_FOLDER/testSpaces $TMP_FOLDER/testWithSpaces
    match=$?
    assertEquals $match 0
}

testMultipleValues() {
   cat << EOF > $TMP_FOLDER/testMultipleValues
S3_ACCESS_KEY -> ACCESS_KEY
S3_SECRET_KEY -> SECRET_KEY
EOF
    ./src/nextcloudbackupsawss3 --s3-access-key ACCESS_KEY --s3-secret-key SECRET_KEY --test='s3-access-key,s3-secret-key' > $TMP_FOLDER/testMultipleValuesResult
    diff $TMP_FOLDER/testMultipleValues $TMP_FOLDER/testMultipleValuesResult
    match=$?
    assertEquals $match 0
}

testMultipleValues2() {
    cat << EOF > $TMP_FOLDER/testMultipleValues
S3_ACCESS_KEY -> ACCESS_KEY
S3_SECRET_KEY -> SECRET_KEY
NEXTCLOUD_USERS -> ALL
EOF
    ./src/nextcloudbackupsawss3 --s3-access-key ACCESS_KEY --s3-secret-key SECRET_KEY --test='s3-access-key,s3-secret-key,nextcloud-users' > $TMP_FOLDER/testMultipleValuesResult
    diff $TMP_FOLDER/testMultipleValues $TMP_FOLDER/testMultipleValuesResult
    match=$?
    assertEquals $match 0
}

testChangeNextcloudUsersWithspaces() {
    users=$(./src/nextcloudbackupsawss3 --nextcloud-users="me, bob" --test='nextcloud-users')
    assertEquals "$users" "NEXTCLOUD_USERS -> me,bob"
}

testChangeNextcloudUsersWithspaces() {
    users=$(./src/nextcloudbackupsawss3 --nextcloud-users="me      , bob" --test='nextcloud-users')
    assertEquals "$users" "NEXTCLOUD_USERS -> me,bob"
}

testDisableLog() {
    log=$(./src/nextcloudbackupsawss3  --test='enable-log')
    assertEquals "$log" "ENABLE_LOG -> false"
}

testEnableLog() {
    log=$(./src/nextcloudbackupsawss3 --enable-log --test='enable-log')
    assertEquals "$log" "ENABLE_LOG -> true"
}

testDisabledLogFile() {
    logfile=$(./src/nextcloudbackupsawss3 --test='log-file')
    assertEquals "$logfile" "LOG_FILE is not defined"
}

testEnableLogFile() {
    logfile=$(./src/nextcloudbackupsawss3 --log-file="$TMP_FOLDER/log" --test='log-file')
    assertEquals "$logfile" "LOG_FILE -> $TMP_FOLDER/log"
}

testIllegalParameters() {
   cat << EOF > $TMP_FOLDER/expectedError
Error: Found illegal parameters: bob foo
EOF
    ./src/nextcloudbackupsawss3 -l bob foo 2> $TMP_FOLDER/error > /dev/null
    sed  's/^.*nextcloudbackupsawss3: //' -i $TMP_FOLDER/error
    diff $TMP_FOLDER/expectedError $TMP_FOLDER/error
    match=$?
    assertEquals $match 0
}

testS3BucketNotDefined() {
    undefined=$(./src/nextcloudbackupsawss3 --test='s3-bucket')
    assertEquals "$undefined" "S3_BUCKET is not defined"
}

testS3BucketIsDefined() {
    defined=$(./src/nextcloudbackupsawss3 --s3-bucket="my-bucket" --test='s3-bucket')
    assertEquals "$defined" "S3_BUCKET -> my-bucket"
}

testHTTPUserNotDefined() {
    undefined=$(./src/nextcloudbackupsawss3 --test='http-user')
    assertEquals "$undefined" "HTTP_USER -> www-data"
}

testHTTPUserIsDefined() {
    defined=$(./src/nextcloudbackupsawss3 --http-user="test-user" --test='http-user')
    assertEquals "$defined" "HTTP_USER -> test-user"
}


# Load shUnit2.
. /usr/bin/shunit2
